#include<stdio.h>
struct online_sys
{
	int pid;
	int at;
	int bt;
	int cmpt;
	int rbt;
}
f[100], s[100], m[100];
int n, fc=0, sc=0, mc=0;
int quanta;

void round_robin()
{
	int time= m[0].at, temp=0, a=0, i, b;
		while(time!=120 && a!=mc)
		{
		for(i=0; i<=temp; i++)
		{
			if(m[i].rbt > quanta)
			{
				time += quanta;
				m[i].rbt -= quanta;
			}
			else if(m[i].rbt <=quanta && m[i].rbt !=0)
			{
				time += m[i].rbt;
				m[i].rbt =0;
				m[i].cmpt = time;
				a++;
			}
			else;
		}
	int start = temp+1;
		for(b= start; b<mc; b++)
		{
			if(m[b].at <= time){
				temp++;
			}
		}
		}	
}
void merger(){
	int isc=0, ifc= 0, min, flag;
	if( fc!=0  && sc!=0)
	{
		while(isc<sc && ifc<fc)
		{
			if(f[ifc].at == s[isc].at)
			{
				m[mc] = f[ifc];
				mc++;
				ifc++;
				m[mc]= s[isc];
				mc++;
				isc++;
			}
			else if(f[ifc].at < s[isc].at)
			{
				m[mc]= f[ifc];
				mc++;
				ifc++;
			}
			else if(f[ifc].at > s[isc].at)
			{
				m[mc]= s[isc];
				mc++;
				isc++;
			}
			else;
		}
		if(mc != (fc+sc))
		{
			if(fc!=ifc)
			{
				while(ifc!=fc)
				{
					m[mc]= f[ifc];
					mc++;
					ifc++;
				}
			}
			else if(sc!=isc)
			{
				while(isc!=sc)
				{
					m[mc]= s[isc];
					mc++;
					isc++;
				}
			}
		}
	}
	else if(fc==0)
	{
		while(isc!=sc)
		{
			m[mc]= s[isc];
			mc++;
			isc++;
		}
	}
	else if(sc==0)
	{
		while(ifc!=fc)
		{
			m[mc]= f[ifc];
			mc++;
			ifc++;
		}
	}
	else {
		printf("\n No valid Jobs available\n");
	}
}
void input()
{
	int tempo,  i, t;
	printf("Enter total no of queries: "); 
	scanf("%d", &n);
	if(n==0) { printf("\n No queries\n"); }
	else
	{
		printf("\nEnter quanta for each Process: "); 
		scanf("%d", &quanta);
		printf("\nEnter 1 for faculty and 2 for student\n");
		for(i=0; i<n; i++)
		{
			printf("\nJob Type (1/2): ");
			scanf("%d", &tempo);
			if(tempo==1)
			{
				printf("Query Id: "); 
				scanf("%d", &f[fc].pid);
				printf("Arrival Time: "); 
				scanf("%d", &t);
				if(t<1000 || t>1200)
				{
					printf("\nPlease Enter The Correct time");
					input();
				}
				else
				{
				f[fc].at= t-1000;
				}
				printf("Resolving Time: ");
				scanf("%d", &f[fc].bt);
				f[fc].rbt= f[fc].bt; 
				fc++;
			} 
			else
			{
				printf("Query Id: "); 
				scanf("%d", &s[sc].pid);
				printf("Arrival Time: "); 
				scanf("%d", &t); 
				if(t<1000 || t>1200)
				{
					printf("\nPlease Enter The Correct time\n");
					input();
				}
				else 
				{s[sc].at= t-1000; }
				printf("Resolving Time: "); 
				scanf("%d", &s[sc].bt);	 
				s[sc].rbt= s[sc].bt;
				sc++;
			}
		}
	}
}
void output()
{
	int i=0, total=0, sum=0; 
	double avg;
	printf("\nQuery ID\tArrival Time\tRessolving Time\tCompletion Time\tTurn Around Time\tWaiting Time");
	for(i; i<mc; i++)
	{
		printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t\t%d",
		m[i].pid, (m[i].at+1000), m[i].bt, (m[i].cmpt+1000), (m[i].cmpt-m[i].at), ((m[i].cmpt-m[i].at)- m[i].bt));
		total= m[i].cmpt;
		sum+= (m[i].cmpt-m[i].at);
	}
	avg = sum/mc;
	printf("\n\nTotal time Spent on all queries: %d", total);
	printf("\nAverage query time: %lf", avg);
	printf("\nProcess Execution Completed");
}
main()
{
 printf("\nWelcome, please follow the instructions provided below"
			"\nEnter time in 2400 hours format. example for 10:30 am enter 10030"
			"\nEnter query arrival times in ascending order"
			"\nEnter All Time units are in minutes. \n\n"
			);
	input();
	merger();
	round_robin();
	output();
}
